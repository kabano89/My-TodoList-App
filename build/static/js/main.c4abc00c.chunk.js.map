{"version":3,"sources":["logo.svg","components/TodoForm.js","firebase.js","components/Todos.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","initialFieldValues","activity","completed","useState","values","setValues","useEffect","currentId","todoObjects","autoComplete","onSubmit","e","preventDefault","addOrEdit","className","placeholder","name","value","onChange","target","type","fireDb","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","ref","Todos","setTodoObjects","setCurrentId","firebaseDb","child","on","snapshot","val","obj","push","err","console","log","set","Object","keys","map","id","style","if","key","once","then","update","onClick","window","confirm","remove","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4abc00c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React,{useState, useEffect} from \"react\";\n\nconst TodoForm = (props) => {\n    const initialFieldValues = {\n        activity: '',\n        completed: false\n    }\n\n    var [values, setValues] = useState(initialFieldValues)\n\n    useEffect(() => {\n        if (props.currentId == '')\n            setValues({\n                ...initialFieldValues\n            })\n        else\n           setValues({\n               ...props.todoObjects[props.currentId]\n           })\n    }, [props.currentId, props.todoObjects])\n\n    const handleInputChange = e => {\n        var {name, value} = e.target\n        setValues({\n            ...values,\n            [name]: value\n        })\n    }\n    const handleFormSubmit = e => {\n        e.preventDefault();\n        props.addOrEdit(values);\n    }\n\n    return (\n        <form autoComplete=\"off\" onSubmit={handleFormSubmit}>\n            <div className=\"form-group input-group\">\n                <div className=\"input-group-prepend\">\n                    <div className=\"input-group-text\">\n                        <i className=\"fas fa-tasks\"></i>\n                    </div>\n                </div>\n                <input className=\"form-control\" placeholder=\"Activity\" name=\"activity\" \n                      value={values.activity}\n                      onChange={handleInputChange}\n                />\n            </div>\n            \n            <div className=\"form-group\">\n                <input type=\"submit\" value={props.currentId==''?\"Save\":\"Update\"} className=\"btn btn-primary btn-block\" />\n            </div>\n\n        </form>\n        \n    );\n}            \nexport default TodoForm;","import firebase from \"firebase\";\n\n // Your web app's Firebase configuration\n var firebaseConfig = {\n    apiKey: \"AIzaSyDmDey5vHNRSUT9KKX9yo8ugOlPj6C3bRE\",\n    authDomain: \"todolist-e7e85.firebaseapp.com\",\n    databaseURL: \"https://todolist-e7e85.firebaseio.com\",\n    projectId: \"todolist-e7e85\",\n    storageBucket: \"todolist-e7e85.appspot.com\",\n    messagingSenderId: \"708779221839\",\n    appId: \"1:708779221839:web:774d4edc9846d23c791b3a\"\n};\n  // Initialize Firebase\n  var fireDb = firebase.initializeApp(firebaseConfig);\n\n  export default fireDb.database().ref();\n","import React, {useState, useEffect} from \"react\";\nimport TodoForm from \"./TodoForm\"\nimport firebaseDb from \"../firebase\";\n\nconst Todos = () => {\n\n    var [todoObjects, setTodoObjects] = useState({})\n    var [currentId, setCurrentId] = useState('')\n    \n    \n    //retrieve records\n    useEffect(() => {\n        firebaseDb.child('todos').on('value', snapshot => {\n            if(snapshot.val() != null)\n                setTodoObjects({\n                    ...snapshot.val()\n                })\n            else\n                setTodoObjects({})\n        })\n    }, [])// similar to componentDidMount\n\n    const addOrEdit = obj => {\n        if(currentId == '')\n            firebaseDb.child('todos').push(\n                obj,\n                err => {\n                    if (err)\n                        console.log(err)\n                    else\n                        setCurrentId('')\n                }\n            )\n        else\n            firebaseDb.child(`todos/${currentId}`).set(\n                obj,\n                err => {\n                    if (err)\n                        console.log(err)\n                    else\n                        setCurrentId('')\n                }\n            )\n    }\n\n    const onDelete = key => {\n        if(window.confirm('Are you sure to delete this record?')){\n            firebaseDb.child(`todos/${key}`).remove(\n                err => {\n                    if (err)\n                        console.log(err)\n                    else\n                        setCurrentId('')\n                }\n            )\n        }\n    }\n\n    \n    const displayMessage = key => {\n        var ref =firebaseDb.child('todos');\n        ref.once(\"value\")\n           .then(function(snapshot){\n                let completed = snapshot.child(`${key}/completed`).val();\n                if(completed === false){\n                    firebaseDb.child(`todos/${key}`).update(\n                         {completed: true}\n                    ) \n                }else{\n                    firebaseDb.child(`todos/${key}`).update(\n                        {completed: false}\n                    )\n                }      \n        })  \n        \n            \n    }\n    \n    \n     \n    \n     const getStyle = () => {\n        return {\n            if(){\n               //textDecoration: 'line-through'\n               //color:'red'\n            }\n                     \n        }\n     }\n\n   \n    return (\n\n     <>\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                    <h1 className=\"display-4 text-center\">Todo List App</h1>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-5\">\n                    <TodoForm {...({ addOrEdit, currentId, todoObjects })} />\n                </div>\n                <div className=\"col-md-7\">\n                    <table className=\"table table-bordeless table-stripped\">\n                        <thead className=\"thead-light\">\n                            <tr>\n                                <th>Activity</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                Object.keys(todoObjects).map(id => {\n                                    return <tr key={id}>\n                                        <td style={getStyle()}> <input type=\"checkbox\" onChange={() => {displayMessage(id)}}/>  {todoObjects[id].activity}</td>\n                                        <td>\n                                            <a className=\"btn text-primary\" onClick={()=> {setCurrentId(id)}}>\n                                                 <i className=\"fas fa-pencil-alt\"></i>\n                                            </a>\n                                            <a className=\"btn text-danger\" onClick={() => {onDelete(id)}}>\n                                                 <i className=\"far fa-trash-alt\"></i>\n                                            </a>\n                                        \n                                        </td>\n                                    </tr>\n                                })\n                            }\n                        </tbody>\n\n                    </table>\n                </div>\n            </div>\n      </>\n    );\n}\nexport default Todos;","import logo from './logo.svg';\nimport './App.css';\nimport Todos from './components/Todos';\n\nfunction App() {\n  return (\n     <div className=\"row\">\n       <div className=\"col-md-8 offset-md-2\">\n           <Todos />\n       </div>\n\n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}